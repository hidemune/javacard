test
aaa	bbb			ファイル名	
 LibreOffice VBA Tips	１日１サンプル目標に			1	LibreOfficeマクロのTipsをみんなで作りたいと考え、DB更新ツールを作成しました。	逆引き辞典の形式で、やりたいことから調べられるようにします。		ツールのソート条件は	「項目１」ー「自動付番ID(入力順)」とし、項目１には	「01.基本」のような文字列を想定しています。			【以下はメモ】		ユーザ管理ツールも作成するか？	メールを利用したシステムとなる見込み。	Webで申請して、返信メールにツールのダウンロードURL	メアドごとにUSER権限を発行していく方法にするか。		SSL		ユーザー管理
00.ライセンスについて				2	この作品はクリエイティブ・コモンズ・表示 - 継承 3.0 非移植・ライセンスで提供されています。このライセンスのコピーを閲覧するには、http://creativecommons.org/licenses/by-sa/3.0/を訪問して下さい。
01.基本	マクロのセキュリティの設定			3	・マクロのセキュリティの設定方法		LibreOfficeを開き、「ツール」ー「オプション」ー「LibreOffice」ー「セキュリティ」	「マクロセキュリティ」ボタンをクリックして、「セキュリティレベル」を「中」に設定して	LibreOfficeを一度閉じて開き直してください。
01.基本	マクロの実行方法			4	LibreOffice Calc を開いたらマクロの実行ボタンを配置します。		「表示」ー「ツールバー」ー「フォームデザイン」で「フォームデザインツールバー」を表示します。	「デザインモードの切り替え」でデザインモードのオン・オフ（実行モード）を切り替えます。		デザインモードはオンにしておいてください。	「表示」ー「ツールバー」ー「フォームコントロール」で「フォームコントロールツールバー」を表示します。	「ボタン」をクリックして、シートをドラッグすると、そのサイズのボタンが配置されます。		貼り付けたボタンを右クリックして、「コントロール」を選択します。	「タイトル」を「実行」に変更して閉じます。		マクロの新規作成のために、	「ツール」ー「マクロ」ー「マクロの管理」ー「LibreOffice Basic」を選択します。	「マクロの記録先」は、開いているブックのStandardにします。（ここでは「無題１」のStandad）	右の「新規作成」をクリックします。	「Module1」と表示されるので、そのまま「OK」をクリックします。		LibreOffice Basic エディタが表示されます。			REM  *****  BASIC  *****		Sub Main		End Sub			と、エディタに表示されているので、以下のように入力してください。	サンプルコードは以下のようになります。			Option Explicit	Option VBASupport 1		REM  *****  BASIC  *****		Sub Main	Dim msg As String	Dim num as integer		    msg = "テスト"	    num = 1		    MsgBox msg & num		End Sub			では、実行してみましょう。		実行ボタンを右クリックして、「コントロール」を選択します。	「属性 プッシュボタン」の「実行時」の右にテキストボックスがあり、更にその右に「...」というボタンがありますのでクリックしてください。		「割り当て」の「マクロ」ボタンをクリックしてください。	先ほど作ったStandard-Module1-Mainを選択して、OKをクリックします。		実行時の割り当てが、「割り当てられたアクション」欄に表示されるのを確認してください。		フォームデザインツールバーの、「デザインモードの切り替え」をクリックして、実行モードに変更します。	シートに先ほど貼り付けた「実行」ボタンをクリックしてください。		メッセージボックス「テスト１」が表示されれば、開発準備OKです。	
01.基本	前提及び変数の宣言			5	ソースコードの一番上に以下のように書くことで、	変数の宣言を必須にできます。マクロのタイプミスでエラーが発生するので、	わかりにくいエラーでハマらないコツです。		Option Explicit			VBAの関数を利用したい時の記述は以下の通りです。	ここでは、この記述があることを前提とします。		Option VBASupport 1			変数の宣言は、以下のようにします。		Dim 変数名 As タイプ	変数名には英数字と、"_"アンダースコアが利用可能です。		As タイプを省略すると、Variant型の変数になります。
01.基本	他のモジュールや関数をまたいで同じ変数を使用			6	Public 変数名 As Long		のように、Publicステートメントを利用すると、	他のモジュールや、関数を跨いで同じ変数を利用できます。		記述位置は、コードの最初の、Option Explicitの下、Sub 関数名の前に記述します。		サンプル	Option Explicit	Option VBASupport 1		REM  *****  BASIC  *****		Public msg As String		Sub Main	Dim num as integer		    msg = "テスト"	    num = 1		    MsgBox msg & num		End Sub		
01.基本	変数のデータ型を指定			7	As キーワードの後に続くデータ型について、以下のようなものが利用可能です。			Byte		1バイト	0〜255	Boolean	2バイト	True or False	Integer	2バイト	-32768〜32767	Long		4バイト	約-21億〜約21億	Single	4バイト	単精度浮動小数点型	Double	8バイト	倍精度浮動小数点型	Date		8バイト      	Currency	8バイト      	String			可変長文字列	Object			オブジェクト	Variant			バリアント型、すべてのデータ型を格納可能	
01.基本	ユーザー定義定数			8	Const ステートメントを、以下のように利用すれば定数を定義可能です。		Const pi As Double = 3.14159265358979	
01.基本	演算子について			9	算術演算子		+   -   *   /    Mod(余り)    \(除算整数部分のみ)	比較演算子		=   <   >   <=   >=   <>	文字列連結		&	論理演算子		And   Or   Not   Eqv   Imp   Xor	ビット演算子		And   Or   Xor	代入演算子		=
01.基本	演算やデータの比較			10	サンプルコード		同じであることを確認		If A = B Then	    MsgBox "A=B"	Else	    MsgBox "A<>B"	End If		異なることを確認	If A <> B Then	    MsgBox "A<>B"	End If		AはB以上	If A >= B Then	    MsgBox "A>=B"	End If		AはBより大きい	If A > B Then	    MsgBox "A>B"	End If		AはB以下	If A <= B Then	    MsgBox "A<=B"	End If		AはB+C以上	If A >= B + C Then	    MsgBox "A>=B+C"	End If		複雑になる場合は括弧をつけましょう。	括弧は２重、３重の入れ子にできます。	If (A >= (B + C)) And (B > C) Then	    MsgBox "(A >= (B + C)) And (B > C)"	End If	
01.基本	ビット演算			11	２進数の And , Or , Xorが利用可能です。
02.セル	単一のセルの値			12	Cells( row , col) で、セルの値の取得及び設定が可能です。	row は行番号で、数値で指定します。	col は列番号で、アルファベット文字列または数値（1から開始）で指定します。		Option Explicit	Option VBASupport 1		REM  *****  BASIC  *****		Public msg As String		Sub Main	Dim num as integer		    msg = Cells(1,"A")	    num = 1	    Cells(1,1) = msg & num		    MsgBox msg & num		End Sub	
03.シート	シートへのアクセス方法			13	以下のようにアクセスします。			Dim sheet as Worksheet			sheet = Sheets("TestSheet")		sheet.cells(1,1) = "TestMsg"			列指定はアルファベットでもいけますね。		Option Explicit	Option VBASupport 1		REM  *****  BASIC  *****		Sub Main				Dim sheet as Worksheet		sheet = Sheets("TestSheet")		sheet.cells(1,"B") = "TestMsgB1"			End Sub			シート名は日本語でもOKでした。		Option Explicit	Option VBASupport 1		REM  *****  BASIC  *****		Sub Main				Dim sheet as Worksheet		sheet = Sheets("テストシート")		sheet.cells(1,"B") = "TestMsgB1"			End Sub	
03.シート	シートをアクティブにする			14	Option Explicit	Option VBASupport 1		REM  *****  BASIC  *****		Sub Main				'シートの選択		Dim sheet As Worksheet		sheet = Sheets("テストシート")		sheet.Cells(1,"B") = "TestMsgB1"				'シートをアクティブにする		sheet.Activate			End Sub	
03.シート	アクティブなシートを取得			15	Option Explicit	Option VBASupport 1		REM  *****  BASIC  *****		Sub Main				'シートの選択		Dim sheet As Worksheet		sheet = ActiveSheet		sheet.Cells(1,"B") = sheet.Name			End Sub
03.シート	シートの情報を調べたい			16	Option Explicit	Option VBASupport 1		REM  *****  BASIC  *****		Sub Main				'シートの選択		Dim sheet As Worksheet		sheet = ActiveSheet		sheet.Cells(1,"B") = sheet.Name 'ここでブレークポイントを設定して実行			End Sub		動作が停止したら、「sheet」を選択して「めがね（オブザーバーの有効化）」アイコンをクリック		ウィンドウの下に、sheetのプロパティを見渡せる一覧が表示されます。	どんな情報にアクセスできるか調べることができます。		一見したところ、Excelのデータ構造とは違いが有るようですね。	全くのExcelマクロのコピペでは動かないと思われますが、似た機能へのアクセス方法を調べるのに	有用かと思います。	
04.ウィンドウ				17	
05.ブック				18	
06.関数				19	
98.DB新規登録テスト				20	DB復旧予定。
99.おまけ	素因数分解サンプル			21	'素因数分解のサンプルコードです。	'Sub Main が、素数一覧の作成、	'sub SoInsuuBunkai が、素因数分解の処理になります。		Option VBASupport 1	REM ***** BASIC *****	Option Explicit	Sub Main	MsgBox("Start")	Dim max As Long	max = 1000000		Dim known(max) As Long	known(0) = 2	Dim ii As Long	ii = 0	Dim isPrime(max) As Boolean	Dim s As String	Dim i, j, lll As Long		'初期化	For i = 2 To max	isPrime(i) = True	Next	'素数個分	For i = 0 To ii	if i <= ii Then	For j = 2 To max \ known(i)	isPrime(known(i) * j) = False	Next	End if	if i = ii Then	For lll = known(i)+ 1 to max	If isPrime(lll) Then	ii = ii + 1	known(ii) = lll	Exit For	End if	Next	End if	Next	ii = 0	For i = 2 To max	If isPrime(i) Then	Cells(ii + 1, 1) = i	ii = ii + 1	End if	Next	MsgBox("End")		End Sub		sub SoInsuuBunkai	dim x as long	dim i as long	dim waru as long	dim str as string		'MsgBox("Start")	str = ""		x = Cells(10,10)		for i = 1 to 300000	waru = val(Cells(i,1))	if waru = 0 then	exit for	end if	if (x = waru) then	str = str & "*" & waru	exit for	end if	if (x mod waru) = 0 then	' msgbox waru	str = str & "*" & waru	x = x / waru	i = i - 1	endif	if (x < waru) then	msgbox "Error"	exit for	endif	next i		Cells(10,11) = "'=" & mid(str,2)	'MsgBox("End")		end sub		
					
